{"version":3,"sources":["components/FeedbackOption/FeedbackOption.jsx","components/StatisticItem/StatisticItem.jsx","utils/options.js","components/Statistics/Statistics.jsx","components/App.jsx","index.js","components/StatisticItem/styles.module.css"],"names":["FeedbackOption","options","onLeaveFeedback","onClick","map","option","key","type","name","toUpperCase","StatisticItem","good","neutral","bad","total","posPersent","className","styles","list","Object","freeze","GOOD","NEUTRAL","BAD","Statistic","state","hendleIncrement","target","setState","Number","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","values","Component","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"oOAgBeA,EAbQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OAGrB,0BAAMC,QAASD,GACZD,EAAQG,KAAI,SAAAC,GAAM,OAAI,4BAAQC,IAAKD,EAAQE,KAAK,SAASC,KAAMH,GAASA,EAAOI,oB,gBCgBrEC,EAnBO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,WAA9B,OACpB,wBAAIC,UAAWC,IAAOC,MACpB,qCAAWP,GACX,wCAAcC,GACd,oCAAUC,GACV,sCAAYC,GACZ,kDAAwBC,EAAxB,OCVWI,SAAOC,OAAO,CAC3BC,KAAM,OACNC,QAAS,UACTC,IAAK,QCGcC,E,2MAEnBC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPa,gBAAkB,YAAiB,IACzBlB,EADwB,EAAbmB,OACXnB,KAER,EAAKoB,UAAS,SAAAH,GACZ,OAAO,eACJjB,EAAOqB,OAAO,CAACJ,EAAMjB,KAAU,O,EAKtCsB,mBAAqB,WAAO,IAAD,EACM,EAAKL,MAA5Bd,EADiB,EACjBA,KAAMC,EADW,EACXA,QACd,OAAOD,EAFkB,EACFE,IACHD,G,EAGtBmB,gCAAkC,WAAO,IAC/BpB,EAAS,EAAKc,MAAdd,KACR,OAAOqB,KAAKC,MAAQtB,EAAO,EAAKmB,qBAAwB,M,wEAGhD,IAAD,EACwBI,KAAKT,MAA5Bd,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,oCACE,qDACA,kBAAC,EAAD,CAAgBZ,QAASkB,OAAOgB,OAAOlC,GAAUC,gBAAiBgC,KAAKR,kBACvE,yCACCf,GAAQC,GAAWC,EAChB,kBAAE,EAAF,CAAgBF,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOoB,KAAKJ,qBAAsBf,WAAYmB,KAAKH,oCAC3G,uD,GArC2BK,aCDxBC,EAFH,kBAAM,kBAAC,EAAD,OCClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,kBCHjDC,EAAOC,QAAU,CAAC,KAAO,wB","file":"static/js/main.293b266d.chunk.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOption = ({ options, onLeaveFeedback }) => (\r\n\r\n\r\n  <form onClick={onLeaveFeedback}>\r\n    {options.map(option => <button key={option} type=\"button\" name={option}>{option.toUpperCase()}</button>)}\r\n  </form >\r\n)\r\n\r\nFeedbackOption.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired\r\n}\r\n\r\nexport default FeedbackOption;","import React from \"react\"\r\nimport PropTypes from 'prop-types';\r\nimport styles from \"./styles.module.css\"\r\n\r\nconst StatisticItem = ({ good, neutral, bad, total, posPersent }) => (\r\n  <ul className={styles.list}>\r\n    <li>Good: {good}</li>\r\n    <li>Neutral: {neutral}</li>\r\n    <li>Bad: {bad}</li>\r\n    <li>Total: {total}</li>\r\n    <li>Positive feedback: {posPersent}%</li>\r\n  </ul>\r\n)\r\n\r\n\r\nStatisticItem.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  posPersent: PropTypes.number\r\n}\r\n\r\nexport default StatisticItem\r\n","export default Object.freeze({\r\n  GOOD: \"good\",\r\n  NEUTRAL: \"neutral\",\r\n  BAD: \"bad\"\r\n});\r\n","import React, { Component } from \"react\"\r\nimport FeedbackOption from \"../FeedbackOption/FeedbackOption\"\r\nimport StatisticItem from \"../StatisticItem/StatisticItem\"\r\n\r\nimport options from \"../../utils/options\"\r\n\r\nexport default class Statistic extends Component {\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0\r\n  };\r\n\r\n  hendleIncrement = ({ target }) => {\r\n    const { name } = target\r\n\r\n    this.setState(state => {\r\n      return {\r\n        [name]: Number([state[name]]) + 1\r\n      }\r\n    })\r\n  }\r\n\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state\r\n    return good + bad + neutral\r\n  }\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const { good } = this.state\r\n    return Math.round(((good / this.countTotalFeedback()) * 100))\r\n  }\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state\r\n    return (\r\n      <>\r\n        <h2>Pelase leave feedback</h2>\r\n        <FeedbackOption options={Object.values(options)} onLeaveFeedback={this.hendleIncrement} />\r\n        <h2>Statistic</h2>\r\n        {good || neutral || bad\r\n          ? < StatisticItem good={good} neutral={neutral} bad={bad} total={this.countTotalFeedback()} posPersent={this.countPositiveFeedbackPercentage()} />\r\n          : <div>No feedback fiven</div>}\r\n      </>\r\n    )\r\n  }\r\n}","import React from \"react\";\r\nimport Statistic from \"./Statistics/Statistics\";\r\n\r\nconst App = () => <Statistic />;\r\n\r\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"styles_list__sh-Ef\"};"],"sourceRoot":""}